<template>
  <div>
    <form @submit.prevent="handleSubmit" class="overflow-scroll pb-2">
      <div>
        <label for="branch_id" class="block text-sm font-medium text-gray-700">Filial ID</label>
        <select
            id="branch_id"
            required
            v-if="branches && branches.data && branches.data.length > 0"
            v-model="form.branch_id"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        >
          <option v-for="branch in branches.data" :key="branch.id" :value="branch.id">
            {{ branch.name }}
          </option>
        </select>
      </div>
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700">Nomi</label>
        <input
            type="text"
            id="name"
            v-model="form.name"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        />
      </div>

      <div>
        <label for="duration" class="block text-sm font-medium text-gray-700">Davomiyligi</label>
        <input
            type="number"
            id="duration"
            v-model="form.duration"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        />
      </div>

      <div>
        <label for="price" class="block text-sm font-medium text-gray-700">Narxi</label>
        <input
            type="number"
            id="price"
            v-model="form.price"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        />
      </div>

      <div>
        <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
        <select
            id="status"
            v-model="form.status"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        >
          <option value="active">Faol</option>
          <option value="inactive">Faol emas</option>
        </select>
      </div>

      <div>
        <label for="description" class="block text-sm font-medium text-gray-700">Tavsif</label>
        <textarea
            id="description"
            v-model="form.description"
            rows="4"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        ></textarea>
      </div>

      <div>
        <label for="image" class="block text-sm font-medium text-gray-700">Upload Image</label>
        <input
            type="file"
            id="image"
            @change="handleImageChange"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            accept="image/*"
        />
        <div v-if="imagePreview" class="mt-2">
          <img :src="imagePreview" alt="Image Preview" class="w-full h-auto rounded-md" />
        </div>
      </div>

      <div class="flex justify-between items-center">
        <button
            type="submit"
            :disabled="!isFormChanged"
            class="w-full px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 mt-2 mb-6 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Saqlash
        </button>
      </div>
    </form>
  </div>
</template>


<script>
import { ref, watch, computed, onMounted } from 'vue';
import { useStore } from 'vuex';

export default {
  props: {
    courseId: {
      type: Number,
      required: true,
    },
  },
  emits: ['close'],
  setup(props,{ emit }) {
    const store = useStore();

    const selectedCourse = computed(() =>
        store.state.course.courses.find((course) => course.id === props.courseId)
    );
    console.log(props.courseId)
    const form = ref({
      name: '',
      duration: '',
      price: '',
      description: '',
      branch_id: '',
      id: props.courseId,
      status: '',
      image: null,
    });

    const branches = ref(null);
    const fetchData = async () => {
      console.log('course_id: ',props.courseId)
      try {
        branches.value = await store.dispatch("branch/getAllBranches");
        form.value.branch_id = branches.value.data[0].id;
      } catch (error) {
        console.error("Xatolik yuz berdi:", error);
      }
    };

    onMounted(fetchData);

    const initialForm = ref({});

    const imagePreview = ref(null);

    watch(
        selectedCourse,
        (course) => {
          if (course) {
            form.value = { ...course };
            initialForm.value = { ...course };
            imagePreview.value =
                course.image && `http://192.168.11.71:8000/storage/courses/${course.image}`;
          }
        },
        { immediate: true }
    );

    const handleImageChange = (event) => {
      const file = event.target.files[0];
      if (file) {
        form.value.image = file;
        const reader = new FileReader();
        reader.onload = () => {
          imagePreview.value = reader.result;
        };
        reader.readAsDataURL(file);
      }
    };

    const isFormChanged = computed(() => {
      const { name, duration, price, description } = form.value;
      const { name: initName, duration: initDuration, price: initPrice, description: initDescription } = initialForm.value;

      return (
          name !== initName ||
          duration !== initDuration ||
          price !== initPrice ||
          description !== initDescription ||
          form.value.image !== initialForm.value.image
      );
    });

    const handleSubmit = () => {
      const updatedCourse = {
        ...form.value,
        id: props.courseId,
      };
      store.dispatch('course/updateCourse', updatedCourse);
      closeModal();
    };

    function closeModal() {
      emit('close');
    }

    return {
      form,
      imagePreview,
      handleSubmit,
      handleImageChange,
      isFormChanged,
      branches,
    };
  },
};
</script>
