<template>
  <div>
    <form @submit.prevent="handleSubmit">

      <div class="mb-4">
        <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Guruh Nomi</label>
        <input
            v-model="form.name"
            type="text"
            id="name"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>

      <div class="mb-4">
        <label for="start_time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Boshlanish Vaqti</label>
        <input
            v-model="form.start_time"
            type="time"
            id="start_time"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>

      <div class="mb-4">
        <label for="end_time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Tugash Vaqti</label>
        <input
            v-model="form.end_time"
            type="time"
            id="end_time"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>

      <div class="mb-4">
        <label for="start_date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Boshlanish Sanasi</label>
        <input
            v-model="form.start_date"
            type="date"
            id="start_date"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>

      <div class="mb-4">
        <label for="end_date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Tugash Sanasi</label>
        <input
            v-model="form.end_date"
            type="date"
            id="end_date"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>

      <div class="mb-4">
        <label for="part_of_time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Kun Qismi</label>
        <select
            v-model="form.part_of_time"
            id="part_of_time"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="morning">Ertalab</option>
          <option value="afternoon">Tushdan Keyin</option>
        </select>
      </div>

      <div class="mb-4">
        <label for="lvl" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Daraja</label>
        <select
            v-model="form.lvl"
            id="lvl"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="beginner">Boshlovchi</option>
          <option value="intermediate">O'rtacha</option>
          <option value="advanced">Yuqori</option>
        </select>
      </div>

      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">O'qituvchi ID</label>
        <div v-if="loadingCourses">O'qituvchilar ma'lumotlari yuklanmoqda...</div>
        <div class="text-red-600" v-else-if="form?.branch_id && teachers?.length === 0">O'qituvchi mavjud emas!</div>
        <select
            id="teacher_id"
            v-else-if="teachers?.length > 0"
            v-model="form.teacher_id"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="">O'qituvchini tanlang!</option>
          <option v-for="teacher in teachers" :key="teacher.id" :value="teacher.id">
            {{ teacher.full_name }}
          </option>
        </select>
      </div>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Kurs ID</label>
        <div v-if="loadingCourses">Kurslar ma'lumotlari yuklanmoqda...</div>
        <div class="text-red-600" v-else-if="form?.branch_id && courses?.length === 0">Kurs mavjud emas!</div>
        <select
            id="course_id"
            v-else-if="courses?.length > 0"
            v-model="form.course_id"
            @change="fetchStudents"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="">Kursni tanlang!</option>
          <option v-for="course in courses" :key="course.id" :value="course.id">
            {{ course.name }}
          </option>
        </select>
      </div>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Xona ID</label>
        <div v-if="loadingRooms">Xonalar ma'lumotlari yuklanmoqda...</div>
        <div class="text-red-600" v-else-if="rooms?.length === 0">Xona mavjud emas!</div>
        <select
            id="room_id"
            v-else-if="rooms?.length > 0"
            v-model="form.room_id"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="">Xonani tanlang!</option>
          <option v-for="room in rooms" :key="room.id" :value="room.id">
            {{ room.name }}
          </option>
        </select>
      </div>

      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">O'quvchilar</label>
        <div v-if="loadingStudents">O'quvchilar ma'lumotlari yuklanmoqda...</div>
        <div class="text-red-600" v-else-if="students?.length === 0">O'quvchilar mavjud emas!</div>
        <div v-else-if="form.course_id && students?.length > 0" class="flex flex-wrap gap-3">
          <div v-for="student in students" :key="student.id" class="flex items-center space-x-2 bg-gray-100 dark:bg-gray-800 p-2 rounded-md shadow-sm">
            <input
                type="checkbox"
                :id="'student_' + student.id"
                :value="student.id"
                :checked="form.students.some(c => c.id === student.id)"
                @change="toggleStudent(student)"
                class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600"
            />
            <label :for="'student_' + student.id" class="cursor-pointer text-sm text-gray-700 dark:text-gray-300 truncate max-w-[150px]">
              {{ student.full_name }}
            </label>

            <select
                v-if="form.students.some((r) => r.id === student.id)"
                :value="form.students.find((r) => r.id === student.id)?.g_status"
                @change="updateStudentStatus(student.id, $event.target.value)"
                class="border rounded p-1"
            >
              <option value="invited" selected>Guruhga taklif qilingan</option>
              <option value="active">Ayni paytda guruhda o‘qiyotgan</option>
              <option value="on_hold">Vaqtincha tanaffusda</option>
              <option value="dropped">O‘qishni tashlab ketgan</option>
              <option value="failed">O‘qishni muvaffaqiyatsiz tugatgan</option>

            </select>
          </div>
        </div>
      </div>

      <div class="mb-4">
        <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Holat</label>
        <select
            v-model="form.status"
            id="status"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="active">Faol</option>
          <option value="inactive">Faol emas</option>
        </select>
      </div>

      <div class="mb-4">
        <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Tavsif</label>
        <textarea
            v-model="form.description"
            id="description"
            rows="3"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        ></textarea>
      </div>

      <div class="flex justify-end">
        <button
            type="submit"
            :disabled="!isFormChanged"
            class="w-full px-4 py-2 rounded-lg mb-12"
            :class="{
              'bg-blue-600 text-white': isFormChanged,
              'bg-gray-400 text-gray-700 cursor-not-allowed': !isFormChanged
            }"
        >
          O'zgartirish
        </button>
      </div>

    </form>
  </div>
</template>

<script>
import { ref, computed, onMounted, watch } from "vue";
import { useStore } from "vuex";
import isEqual from "lodash/isEqual";

export default {
  props: {
    groupId: {
      type: Number,
      required: true,
    },
  },
  emits: ["close"],
  setup(props, { emit }) {
    const store = useStore();

    const activeUser = JSON.parse(localStorage.getItem("user"));
    const selectedGroup = computed(() =>
        store.state.group.groups.find((group) => group.id === props.groupId)
    );
    const selectedBranch = ref(selectedGroup.value?.course?.branch_id);
    const loadingCourses = ref(false);
    const loadingRooms = ref(false);
    const loadingStudents = ref(false);
    const selectedCourse = ref(null);
    const courses = ref([]);
    const rooms = ref([]);
    const teachers = ref([]);
    const students = ref([])
    const fetchData = async () => {
      loadingCourses.value = true;
      loadingRooms.value = true;
      try {
        console.log("selectedBranch: ",selectedBranch.value)
        const response = await store.dispatch("branch/getBranchById", selectedBranch.value);
        courses.value = response?.courses;
        rooms.value = response?.rooms;
        teachers.value = response?.users;
      } catch (error) {
        console.error("Xatolik yuz berdi:", error);
      } finally {
        loadingCourses.value = false;
        loadingRooms.value = false;
      }
    }

    const fetchStudents = async () => {
      selectedCourse.value = form.value.course_id
      loadingStudents.value = true;
      if (!selectedCourse.value) return;
      try {
        const response = await store.dispatch('student/getStudentByCourseId', selectedCourse.value);
        students.value = response.students;
      } catch (error) {
        console.error("Error fetching students:", error);
      } finally {
        loadingStudents.value = false;
      }
    };

    onMounted(() => {
      fetchData();
      fetchStudents();
    });

    const form = ref({
      user_id: activeUser.id,
      course_id: "",
      room_id: "",
      teacher_id: "",
      students: [],
      id: props.groupId,
      name: "",
      start_time: "",
      end_time: "",
      start_date: "",
      end_date: "",
      part_of_time: "",
      lvl: "",
      status: "active",
      description: "",
    });

    const toggleStudent = (student) => {
      const index = form.value.students.findIndex((r) => r.id === student.id);
      if (index === -1) {
        form.value.students.push({ id: student.id, g_status: "invited" });
      } else {
        form.value.students.splice(index, 1);
      }
    };

    const updateStudentStatus = (studentId, status) => {
      const student = form.value.students.find((r) => r.id === studentId);
      if (student) student.g_status = status;
    };
    const initialForm = ref({});

    watch(
        selectedGroup,
        (group) => {
          if (group) {
            form.value = { ...group };
            initialForm.value = { ...group };
          }
        },
        { immediate: true }
    );

    const isFormChanged = computed(() => {
      return !isEqual(form.value, initialForm.value);
    });

    const handleSubmit = async () => {
      if (!isFormChanged.value) return closeModal();

      try {
        const formData = new FormData();

        formData.append("user_id", form.value.user_id);
        formData.append("course_id", form.value.course_id);
        formData.append("room_id", form.value.room_id);
        formData.append("teacher_id", form.value.teacher_id);
        formData.append("students", JSON.stringify(form.value.students));
        formData.append("id", form.value.id);
        formData.append("name", form.value.name);

        const formatTime = (time) => time.slice(0, 5);

        formData.append("start_time", formatTime(form.value.start_time));
        formData.append("end_time", formatTime(form.value.end_time));
        console.log("start_time:", formatTime(form.value.start_time));
        console.log("end_time:", formatTime(form.value.end_time));
        formData.append("start_date", form.value.start_date);
        formData.append("end_date", form.value.end_date);
        formData.append("part_of_time", form.value.part_of_time);
        formData.append("lvl", form.value.lvl);
        formData.append("status", form.value.status);
        formData.append("description", form.value.description);

        await store.dispatch("group/updateGroup", formData);

        Object.assign(initialForm.value, form.value);
        closeModal();
      } catch (error) {
        console.error("O'zgartirishda xatolik yuz berdi:", error);
      }
    };




    const closeModal = () => {
      emit("close");
    };

    return {
      form,
      handleSubmit,
      fetchStudents,
      toggleStudent,
      updateStudentStatus,
      isFormChanged,
      teachers,
      rooms,
      courses,
      students,
      loadingCourses,
      loadingStudents,
      loadingRooms,
    };
  },
};
</script>
