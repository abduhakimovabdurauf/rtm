<template>
  <div>
    <form @submit.prevent="handleSubmit" class="overflow-scroll pb-2">

      <div>
        <label for="title" class="block text-sm font-medium text-gray-700">Nomi</label>
        <input
            type="text"
            id="title"
            v-model="form.title"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        />
      </div>

      <div>
        <label for="text" class="block text-sm font-medium text-gray-700">Matn</label>
        <input
            type="text"
            id="text"
            v-model="form.text"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        />
      </div>

      <div class="mb-4">
        <label for="type" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Rangi
        </label>
        <select
            v-model="form.type"
            id="type"
            class="mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:text-white"
        >
          <option
              v-for="color in colors"
              :key="color.value"
              :value="color.value"
          >
            {{ color.label }}
          </option>
        </select>
      </div>

      <div class="mb-4">
        <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300">O'qildimi</label>
        <select
            v-model="form.n_status"
            id="status"
            class="mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:text-white"
        >
          <option value="active">O'qildi</option>
          <option value="inactive">O'qilmadi</option>
        </select>
      </div>

      <div>
        <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
        <select
            id="status"
            v-model="form.status"
            class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        >
          <option value="active">Faol</option>
          <option value="inactive">Faol emas</option>
        </select>
      </div>

      <div class="flex justify-between items-center">
        <button
            type="submit"
            :disabled="!isFormChanged"
            class="w-full px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 mt-2 mb-6 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Saqlash
        </button>
      </div>
    </form>
  </div>
</template>


<script>
import { ref, watch, computed } from 'vue';
import { useStore } from 'vuex';

export default {
  props: {
    notificationId: {
      type: Number,
      required: true,
    },
  },
  emits: ['close'],
  setup(props,{ emit }) {
    const store = useStore();

    const selectedNotification = computed(() =>
        store.state.notification.notifications.find((notification) => notification.id === props.notificationId)
    );

    const form = ref({
      title: '',
      text: '',
      type: '',
      n_status: '',
      id: props.notificationId,
      status: '',
    });

    const initialForm = ref({});

    watch(
        selectedNotification,
        (notification) => {
          if (notification) {
            form.value = { ...notification };
            initialForm.value = { ...notification };
          }
        },
        { immediate: true }
    );

    const isFormChanged = computed(() => {
      const { title, text, type, status, n_status } = form.value;
      const { title: initTitle, text: initText, type: initType, status: initStatus, n_status: init_n_Status } = initialForm.value;

      return (
          title !== initTitle ||
          text !== initText ||
          type !== initType ||
          status !== initStatus ||
          n_status !== init_n_Status
      );
    });

    const handleSubmit = () => {
      const updatedNotification = {
        ...form.value,
        id: props.notificationId,
      };
      store.dispatch('notification/updateNotification', updatedNotification);
      closeModal();
    };

    function closeModal() {
      emit('close');
    }
    const colors = [
      { label: "ðŸŸ¢ Yashil", value: "bg-green-500" },
      { label: "ðŸ”´ Qizil", value: "bg-red-500" },
      { label: "ðŸŸ¡ Sariq", value: "bg-yellow-500" },
      { label: "ðŸ”µ Ko'k", value: "bg-blue-500" },
      { label: "ðŸŸ£ Binafsha", value: "bg-violet-500" },
    ];
    return {
      form,
      handleSubmit,
      isFormChanged,
      colors,
    };
  },
};
</script>
